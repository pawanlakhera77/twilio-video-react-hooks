{"version":3,"sources":["Lobby.js","Participant.js","Room.js","VideoChat.js","App.js","serviceWorker.js","index.js"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","onSubmit","htmlFor","type","id","value","onChange","required","Participant","participant","useState","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","useRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","useEffect","on","kind","v","a","removeAllListeners","videoTrack","attach","current","detach","audioTrack","className","identity","ref","autoPlay","muted","Room","token","handleLogout","room","setRoom","participants","setParticipants","participantConnected","prevParticipants","participantDisconnected","p","Video","connect","name","then","forEach","currentRoom","localParticipant","state","tracks","trackPublication","stop","disconnect","remoteParticipants","key","sid","onClick","VideoChat","setUsername","setRoomName","setToken","useCallback","event","target","preventDefault","fetch","method","headers","res","json","data","App","role","aria-label","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.624a7440.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Lobby = ({\r\n  username,\r\n  handleUsernameChange,\r\n  roomName,\r\n  handleRoomNameChange,\r\n  handleSubmit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>Enter a room</h2>\r\n      <div>\r\n        <label htmlFor=\"name\">Name:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"field\"\r\n          value={username}\r\n          onChange={handleUsernameChange}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"room\">Room name:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"room\"\r\n          value={roomName}\r\n          onChange={handleRoomNameChange}\r\n          required\r\n        />\r\n      </div>\r\n\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Lobby;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Participant = ({ participant }) => {\r\n  const [videoTracks, setVideoTracks] = useState([]);\r\n  const [audioTracks, setAudioTracks] = useState([]);\r\n\r\n  const videoRef = useRef();\r\n  const audioRef = useRef();\r\n\r\n  const trackpubsToTracks = (trackMap) =>\r\n    Array.from(trackMap.values())\r\n      .map((publication) => publication.track)\r\n      .filter((track) => track !== null);\r\n\r\n  useEffect(() => {\r\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\r\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\r\n\r\n    const trackSubscribed = (track) => {\r\n      if (track.kind === \"video\") {\r\n        setVideoTracks((videoTracks) => [...videoTracks, track]);\r\n      } else if (track.kind === \"audio\") {\r\n        setAudioTracks((audioTracks) => [...audioTracks, track]);\r\n      }\r\n    };\r\n\r\n    const trackUnsubscribed = (track) => {\r\n      if (track.kind === \"video\") {\r\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track));\r\n      } else if (track.kind === \"audio\") {\r\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track));\r\n      }\r\n    };\r\n\r\n    participant.on(\"trackSubscribed\", trackSubscribed);\r\n    participant.on(\"trackUnsubscribed\", trackUnsubscribed);\r\n\r\n    return () => {\r\n      setVideoTracks([]);\r\n      setAudioTracks([]);\r\n      participant.removeAllListeners();\r\n    };\r\n  }, [participant]);\r\n\r\n  useEffect(() => {\r\n    const videoTrack = videoTracks[0];\r\n    if (videoTrack) {\r\n      videoTrack.attach(videoRef.current);\r\n      return () => {\r\n        videoTrack.detach();\r\n      };\r\n    }\r\n  }, [videoTracks]);\r\n\r\n  useEffect(() => {\r\n    const audioTrack = audioTracks[0];\r\n    if (audioTrack) {\r\n      audioTrack.attach(audioRef.current);\r\n      return () => {\r\n        audioTrack.detach();\r\n      };\r\n    }\r\n  }, [audioTracks]);\r\n\r\n  return (\r\n    <div className=\"participant\">\r\n      <h3>{participant.identity}</h3>\r\n      <video ref={videoRef} autoPlay={true} />\r\n      <audio ref={audioRef} autoPlay={true} muted={true} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Participant;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Video from 'twilio-video';\r\nimport Participant from './Participant';\r\n\r\nconst Room = ({ roomName, token, handleLogout }) => {\r\n  const [room, setRoom] = useState(null);\r\n  const [participants, setParticipants] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const participantConnected = participant => {\r\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\r\n    };\r\n\r\n    const participantDisconnected = participant => {\r\n      setParticipants(prevParticipants =>\r\n        prevParticipants.filter(p => p !== participant)\r\n      );\r\n    };\r\n\r\n    Video.connect(token, {\r\n      name: roomName\r\n    }).then(room => {\r\n      setRoom(room);\r\n      room.on('participantConnected', participantConnected);\r\n      room.on('participantDisconnected', participantDisconnected);\r\n      room.participants.forEach(participantConnected);\r\n    });\r\n\r\n    return () => {\r\n      setRoom(currentRoom => {\r\n        if (currentRoom && currentRoom.localParticipant.state === 'connected') {\r\n          currentRoom.localParticipant.tracks.forEach(function(trackPublication) {\r\n            trackPublication.track.stop();\r\n          });\r\n          currentRoom.disconnect();\r\n          return null;\r\n        } else {\r\n          return currentRoom;\r\n        }\r\n      });\r\n    };\r\n  }, [roomName, token]);\r\n\r\n  const remoteParticipants = participants.map(participant => (\r\n    <Participant key={participant.sid} participant={participant} />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"room\">\r\n      <h2>Room: {roomName}</h2>\r\n      <button onClick={handleLogout}>Log out</button>\r\n      <div className=\"local-participant\">\r\n        {room ? (\r\n          <Participant\r\n            key={room.localParticipant.sid}\r\n            participant={room.localParticipant}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n      <h3>Remote Participants</h3>\r\n      <div className=\"remote-participants\">{remoteParticipants}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","import React, { useState, useCallback } from 'react';\r\nimport Lobby from './Lobby';\r\nimport Room from './Room';\r\n\r\nconst VideoChat = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [roomName, setRoomName] = useState('');\r\n  const [token, setToken] = useState(null);\r\n\r\n  const handleUsernameChange = useCallback(event => {\r\n    setUsername(event.target.value);\r\n  }, []);\r\n\r\n  const handleRoomNameChange = useCallback(event => {\r\n    setRoomName(event.target.value);\r\n  }, []);\r\n\r\n  const handleSubmit = useCallback(\r\n    async event => {\r\n      event.preventDefault();\r\n      const data = await fetch('https://video-chat-twilio-app.herokuapp.com/token', {\r\n        // mode: 'no-cors',\r\n        method: 'GET',\r\n        // body: JSON.stringify({\r\n        //   identity: username,\r\n        //   room: roomName\r\n        // }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }).then(res => res.json());\r\n      setToken(data.token);\r\n    },\r\n    [roomName, username]\r\n  );\r\n\r\n  const handleLogout = useCallback(event => {\r\n    setToken(null);\r\n  }, []);\r\n\r\n  let render;\r\n  if (token) {\r\n    render = (\r\n      <Room roomName={roomName} token={token} handleLogout={handleLogout} />\r\n    );\r\n  } else {\r\n    render = (\r\n      <Lobby\r\n        username={username}\r\n        roomName={roomName}\r\n        handleUsernameChange={handleUsernameChange}\r\n        handleRoomNameChange={handleRoomNameChange}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n    );\r\n  }\r\n  return render;\r\n};\r\n\r\nexport default VideoChat;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport VideoChat from './VideoChat';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <header>\r\n        <h1>Video Chat with Hooks</h1>\r\n      </header>\r\n      <main>\r\n        <VideoChat />\r\n      </main>\r\n      <footer>\r\n        <p>\r\n          Made with{' '}\r\n          <span role=\"img\" aria-label=\"React\">\r\n            ⚛️\r\n          </span>{' '}\r\n          by <a href=\"https://twitter.com/philnash\">philnash</a>\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}